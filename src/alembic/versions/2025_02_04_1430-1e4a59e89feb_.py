"""empty message

Revision ID: 1e4a59e89feb
Revises:
Create Date: 2025-02-04 14:30:42.509407

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from fastapi_storages import FileSystemStorage

from src.alembic import custom_types
import fastapi_storages.integrations.sqlalchemy


# revision identifiers, used by Alembic.
revision: str = "1e4a59e89feb"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "categories",
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "specifications",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "tags",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column("fullname", sa.String(), nullable=False),
        sa.Column(
            "email",
            sa.String(length=32),
            server_default="Не указано",
            nullable=False,
        ),
        sa.Column(
            "phone",
            sa.String(length=32),
            server_default="Не указано",
            nullable=False,
        ),
        sa.Column("username", sa.String(length=32), nullable=False),
        sa.Column("password", sa.LargeBinary(), nullable=False),
        sa.Column(
            "is_admin", sa.Boolean(), server_default="0", nullable=False
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "avatars",
        sa.Column(
            "src",
            fastapi_storages.integrations.sqlalchemy.ImageType(
                storage=FileSystemStorage(path="uploads/avatars")
            ),
            nullable=False,
        ),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id"),
    )
    op.create_table(
        "category_images",
        sa.Column("src", sa.String(), nullable=False),
        sa.Column("category_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["category_id"], ["categories.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("category_id"),
    )
    op.create_table(
        "products",
        sa.Column("title", sa.String(), nullable=False),
        sa.Column(
            "price_per_unit", sa.Numeric(precision=10, scale=4), nullable=False
        ),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.Column(
            "date",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "description",
            sa.String(),
            server_default="Нет описания",
            nullable=False,
        ),
        sa.Column(
            "full_description",
            sa.Text(),
            server_default="Нет полного описания",
            nullable=False,
        ),
        sa.Column(
            "free_delivery", sa.Boolean(), server_default="0", nullable=False
        ),
        sa.Column("category_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.CheckConstraint("count >= 0"),
        sa.CheckConstraint("price_per_unit >= 0"),
        sa.ForeignKeyConstraint(
            ["category_id"], ["categories.id"], ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "tags_categories_association",
        sa.Column("category_id", sa.Integer(), nullable=False),
        sa.Column("tag_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["category_id"], ["categories.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["tag_id"], ["tags.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "category_id", "tag_id", name="idx_uniq_category_tag"
        ),
    )
    op.create_table(
        "product_images",
        sa.Column("src", sa.String(), nullable=False),
        sa.Column("product_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "reviews",
        sa.Column("rate", sa.Integer(), nullable=False),
        sa.Column("product_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.CheckConstraint("rate >= 1 and rate <= 5"),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "user_id", "product_id", name="idx_uniq_user_product"
        ),
    )
    op.create_table(
        "sales",
        sa.Column(
            "sale_price", sa.Numeric(precision=10, scale=4), nullable=False
        ),
        sa.Column(
            "date_from",
            sa.Date(),
            server_default=sa.text("CURRENT_DATE"),
            nullable=False,
        ),
        sa.Column("date_to", sa.Date(), nullable=False),
        sa.Column("product_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.CheckConstraint("date_from < date_to"),
        sa.CheckConstraint("sale_price >= 0"),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("product_id"),
    )
    op.create_table(
        "specifications_products_association",
        sa.Column("product_id", sa.Integer(), nullable=False),
        sa.Column("specification_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["product_id"], ["products.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["specification_id"], ["specifications.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "product_id",
            "specification_id",
            name="idx_uniq_product_specification",
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("specifications_products_association")
    op.drop_table("sales")
    op.drop_table("reviews")
    op.drop_table("product_images")
    op.drop_table("tags_categories_association")
    op.drop_table("products")
    op.drop_table("category_images")
    op.drop_table("avatars")
    op.drop_table("users")
    op.drop_table("tags")
    op.drop_table("specifications")
    op.drop_table("categories")
    # ### end Alembic commands ###
